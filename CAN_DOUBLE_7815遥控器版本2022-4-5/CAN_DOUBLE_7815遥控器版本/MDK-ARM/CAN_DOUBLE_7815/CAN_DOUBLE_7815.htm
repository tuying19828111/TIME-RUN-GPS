<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [CAN_DOUBLE_7815\CAN_DOUBLE_7815.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image CAN_DOUBLE_7815\CAN_DOUBLE_7815.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Apr 05 21:42:31 2022
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EXTI10_15_IRQHandler &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[36]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">ACMP0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ACMP0_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[37]">ACMP1_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[35]">ADC_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[29]">BKP_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[33]">CAN1_Handler</a> from ac78xx_can.o(i.CAN1_Handler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[43]">CAN1_IRQHandler_Callback</a> from ac78xx_irq_cb.o(i.CAN1_IRQHandler_Callback) referenced from can.o(i.ATC_CAN1_Init)
 <LI><a href="#[34]">CAN2_Handler</a> from ac78xx_can.o(i.CAN2_Handler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[44]">CAN2_IRQHandler_Callback</a> from ac78xx_irq_cb.o(i.CAN2_IRQHandler_Callback) referenced from can.o(i.ATC_CAN2_Init)
 <LI><a href="#[24]">DMA10_IRQHandler</a> from ac78xx_dma.o(i.DMA10_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[25]">DMA11_IRQHandler</a> from ac78xx_dma.o(i.DMA11_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[26]">DMA12_IRQHandler</a> from ac78xx_dma.o(i.DMA12_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[1b]">DMA1_IRQHandler</a> from ac78xx_dma.o(i.DMA1_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[1c]">DMA2_IRQHandler</a> from ac78xx_dma.o(i.DMA2_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[1d]">DMA3_IRQHandler</a> from ac78xx_dma.o(i.DMA3_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[1e]">DMA4_IRQHandler</a> from ac78xx_dma.o(i.DMA4_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[1f]">DMA5_IRQHandler</a> from ac78xx_dma.o(i.DMA5_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[20]">DMA6_IRQHandler</a> from ac78xx_dma.o(i.DMA6_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[21]">DMA7_IRQHandler</a> from ac78xx_dma.o(i.DMA7_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[22]">DMA8_IRQHandler</a> from ac78xx_dma.o(i.DMA8_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[23]">DMA9_IRQHandler</a> from ac78xx_dma.o(i.DMA9_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[3f]">EFlash_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from ac78xx_gpio.o(i.EXTI0_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[31]">EXTI10_15_IRQHandler</a> from ac78xx_gpio.o(i.EXTI10_15_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from ac78xx_gpio.o(i.EXTI1_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from ac78xx_gpio.o(i.EXTI2_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from ac78xx_gpio.o(i.EXTI3_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from ac78xx_gpio.o(i.EXTI4_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[16]">EXTI5_9_IRQHandler</a> from ac78xx_gpio.o(i.EXTI5_9_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from ac78xx_i2c.o(i.I2C1_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from ac78xx_i2c.o(i.I2C2_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[30]">LIN0_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[2f]">PVD_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[a]">PWDT_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[2c]">PWM0_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[2d]">PWM1_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[2e]">PWM2_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[3e]">PWM3_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[2a]">RTC_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[17]">SPI1_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[18]">SPI2_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[32]">SPM_IRQHandler</a> from ac78xx_spm.o(i.SPM_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[41]">SystemInit</a> from system_ac78xx.o(i.SystemInit) referenced from startup_ac78xx.o(.text)
 <LI><a href="#[27]">TIMER0_IRQHandler</a> from ac78xx_timer.o(i.TIMER0_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[45]">TIMER0_IRQHandler_Callback</a> from ac78xx_irq_cb.o(i.TIMER0_IRQHandler_Callback) referenced from timer.o(i.ATC_TIMER0_Init)
 <LI><a href="#[28]">TIMER1_IRQHandler</a> from ac78xx_timer.o(i.TIMER1_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[46]">TIMER1_IRQHandler_Callback</a> from ac78xx_irq_cb.o(i.TIMER1_IRQHandler_Callback) referenced from timer.o(i.ATC_TIMER1_Init)
 <LI><a href="#[38]">TIMER2_IRQHandler</a> from ac78xx_timer.o(i.TIMER2_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[39]">TIMER3_IRQHandler</a> from ac78xx_timer.o(i.TIMER3_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[3a]">TIMER4_IRQHandler</a> from ac78xx_timer.o(i.TIMER4_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[3b]">TIMER5_IRQHandler</a> from ac78xx_timer.o(i.TIMER5_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[3c]">TIMER6_IRQHandler</a> from ac78xx_timer.o(i.TIMER6_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[3d]">TIMER7_IRQHandler</a> from ac78xx_timer.o(i.TIMER7_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[b]">UART1_IRQHandler</a> from ac78xx_uart.o(i.UART1_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[47]">UART1_IRQHandler_Callback</a> from ac78xx_irq_cb.o(i.UART1_IRQHandler_Callback) referenced from uart.o(i.ATC_UART1_Init)
 <LI><a href="#[c]">UART2_IRQHandler</a> from ac78xx_uart.o(i.UART2_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[d]">UART3_IRQHandler</a> from ac78xx_uart.o(i.UART3_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[48]">UART3_IRQHandler_Callback</a> from ac78xx_irq_cb.o(i.UART3_IRQHandler_Callback) referenced from uart.o(i.ATC_UART3_Init)
 <LI><a href="#[e]">UART4_IRQHandler</a> from ac78xx_uart.o(i.UART4_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[f]">UART5_IRQHandler</a> from ac78xx_uart.o(i.UART5_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[10]">UART6_IRQHandler</a> from ac78xx_uart.o(i.UART6_IRQHandler) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[2b]">Watchdog_IRQHandler</a> from startup_ac78xx.o(.text) referenced from startup_ac78xx.o(RESET)
 <LI><a href="#[42]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ac78xx.o(.text)
 <LI><a href="#[40]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[49]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[63]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e6]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[e7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[e8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BKP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EFlash_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>LIN0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PVD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>Watchdog_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ac78xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Command_Judge
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler_Callback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_I2C2_Init
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d3]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Command_Judge
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_f2ulz</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ffixul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
</UL>

<P><STRONG><a name="[ec]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ed]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[4f]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[55]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[58]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[dd]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[ef]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>ATC_CAN1_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, can.o(i.ATC_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ATC_CAN1_Init &rArr; CAN_Initialize &rArr; CKGEN_SetCANClock &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetEventCallBack
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_CAN_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Standby
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>ATC_CAN2_Init</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, can.o(i.ATC_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ATC_CAN2_Init &rArr; CAN_Initialize &rArr; CKGEN_SetCANClock &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetEventCallBack
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_CAN_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Standby
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>ATC_GPIO_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio.o(i.ATC_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ATC_GPIO_Init &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetE4E2
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinValue
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>ATC_I2C2_Init</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, i2c.o(i.ATC_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ATC_I2C2_Init &rArr; MSP_I2C_Init &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_I2C_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>ATC_TIMER0_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timer.o(i.ATC_TIMER0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ATC_TIMER0_Init &rArr; TIMER_Init &rArr; TIMER_ModuleEnable &rArr; CKGEN_SoftReset
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetCallback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_TIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>ATC_TIMER1_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timer.o(i.ATC_TIMER1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ATC_TIMER1_Init &rArr; TIMER_Init &rArr; TIMER_ModuleEnable &rArr; CKGEN_SoftReset
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetCallback
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_TIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>ATC_UART1_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uart.o(i.ATC_UART1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ATC_UART1_Init &rArr; UART_Init &rArr; UART_SetBaudrate &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetEventCallback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_UART_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetRxIntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>ATC_UART3_Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, uart.o(i.ATC_UART3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ATC_UART3_Init &rArr; UART_Init &rArr; UART_SetBaudrate &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetEventCallback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_UART_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetRxIntEn
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>CAN1_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ac78xx_can.o(i.CAN1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN1_Handler &rArr; CAN_HandleEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HandleEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CAN1_IRQHandler_Callback</STRONG> (Thumb, 530 bytes, Stack size 16 bytes, ac78xx_irq_cb.o(i.CAN1_IRQHandler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN1_IRQHandler_Callback &rArr; CAN_MessageSend &rArr; CAN_WaitTransmissionDone &rArr; WaitTransmitSecondaryDone
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessageSend
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessageRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsMsgInReceiveBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.ATC_CAN1_Init)
</UL>
<P><STRONG><a name="[34]"></a>CAN2_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ac78xx_can.o(i.CAN2_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN2_Handler &rArr; CAN_HandleEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HandleEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN2_IRQHandler_Callback</STRONG> (Thumb, 530 bytes, Stack size 16 bytes, ac78xx_irq_cb.o(i.CAN2_IRQHandler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CAN2_IRQHandler_Callback &rArr; CAN_MessageSend &rArr; CAN_WaitTransmissionDone &rArr; WaitTransmitSecondaryDone
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessageSend
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessageRead
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IsMsgInReceiveBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(i.ATC_CAN2_Init)
</UL>
<P><STRONG><a name="[7e]"></a>CAN_HandleEvent</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, ac78xx_can.o(i.CAN_HandleEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_HandleEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Handler
</UL>

<P><STRONG><a name="[67]"></a>CAN_Initialize</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, ac78xx_can.o(i.CAN_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN_Initialize &rArr; CKGEN_SetCANClock &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SoftReset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetCANClock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_Enable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetFilter
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanIndex
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetBitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_CAN2_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_CAN1_Init
</UL>

<P><STRONG><a name="[80]"></a>CAN_MessageRead</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ac78xx_can.o(i.CAN_MessageRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_MessageRead
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler_Callback
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler_Callback
</UL>

<P><STRONG><a name="[81]"></a>CAN_MessageSend</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ac78xx_can.o(i.CAN_MessageSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAN_MessageSend &rArr; CAN_WaitTransmissionDone &rArr; WaitTransmitSecondaryDone
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WaitTransmissionIdle
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WaitTransmissionDone
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetMsgInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler_Callback
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler_Callback
</UL>

<P><STRONG><a name="[65]"></a>CAN_SetEventCallBack</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ac78xx_can.o(i.CAN_SetEventCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_SetEventCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_CAN2_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_CAN1_Init
</UL>

<P><STRONG><a name="[87]"></a>CAN_SetFilter</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, ac78xx_can.o(i.CAN_SetFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CAN_SetFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
</UL>

<P><STRONG><a name="[89]"></a>CAN_SetMsgInfo</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, ac78xx_can.o(i.CAN_SetMsgInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_SetMsgInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessageSend
</UL>

<P><STRONG><a name="[8a]"></a>CAN_WaitTransmissionDone</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ac78xx_can.o(i.CAN_WaitTransmissionDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN_WaitTransmissionDone &rArr; WaitTransmitSecondaryDone
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTransmitSecondaryDone
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitTransmitPrimaryDone
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCanIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessageSend
</UL>

<P><STRONG><a name="[88]"></a>CAN_WaitTransmissionIdle</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, ac78xx_can.o(i.CAN_WaitTransmissionIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_WaitTransmissionIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessageSend
</UL>

<P><STRONG><a name="[84]"></a>CKGEN_Enable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ac78xx_ckgen.o(i.CKGEN_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKGEN_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ModuleEnable
</UL>

<P><STRONG><a name="[8d]"></a>CKGEN_SetAPBClockDivider</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_ckgen.o(i.CKGEN_SetAPBClockDivider))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CKGEN_SetAPBClockDivider &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitsValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[83]"></a>CKGEN_SetCANClock</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ac78xx_ckgen.o(i.CKGEN_SetCANClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CKGEN_SetCANClock &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitsValue
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
</UL>

<P><STRONG><a name="[8f]"></a>CKGEN_SetPLLReference</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_ckgen.o(i.CKGEN_SetPLLReference))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CKGEN_SetPLLReference &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitsValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[90]"></a>CKGEN_SetPllFeedbackDiv</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_ckgen.o(i.CKGEN_SetPllFeedbackDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CKGEN_SetPllFeedbackDiv &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitsValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[91]"></a>CKGEN_SetPllPostDiv</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_ckgen.o(i.CKGEN_SetPllPostDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CKGEN_SetPllPostDiv &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitsValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[92]"></a>CKGEN_SetPllPrevDiv</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_ckgen.o(i.CKGEN_SetPllPrevDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CKGEN_SetPllPrevDiv &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitsValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[93]"></a>CKGEN_SetSFlashClock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ac78xx_ckgen.o(i.CKGEN_SetSFlashClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CKGEN_SetSFlashClock &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitsValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[94]"></a>CKGEN_SetSysclkDiv</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_ckgen.o(i.CKGEN_SetSysclkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CKGEN_SetSysclkDiv &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitsValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[95]"></a>CKGEN_SetSysclkSrc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_ckgen.o(i.CKGEN_SetSysclkSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CKGEN_SetSysclkSrc &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBitsValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[85]"></a>CKGEN_SoftReset</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ac78xx_ckgen.o(i.CKGEN_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKGEN_SoftReset
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ModuleEnable
</UL>

<P><STRONG><a name="[24]"></a>DMA10_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA10_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA11_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA11_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA11_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA12_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA12_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA3_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA4_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA5_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA5_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA6_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA6_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA7_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA7_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA8_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA8_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA9_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_dma.o(i.DMA9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA9_IRQHandler &rArr; DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>DMA_ClearFlag</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ac78xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_ClearFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelHardRst
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA9_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA8_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA7_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA6_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA4_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA3_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA12_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA11_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA10_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ac78xx_gpio.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI0_IRQHandler &rArr; GPIO_GetPendingExtIntGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPendingExtIntGPIONum
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPendingExtInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, ac78xx_gpio.o(i.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = EXTI10_15_IRQHandler &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPendingIRQMask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPendingExtIntGPIONum
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPendingExtInt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ac78xx_gpio.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI1_IRQHandler &rArr; GPIO_GetPendingExtIntGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPendingExtIntGPIONum
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPendingExtInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ac78xx_gpio.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI2_IRQHandler &rArr; GPIO_GetPendingExtIntGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPendingExtIntGPIONum
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPendingExtInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ac78xx_gpio.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI3_IRQHandler &rArr; GPIO_GetPendingExtIntGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPendingExtIntGPIONum
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPendingExtInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ac78xx_gpio.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_IRQHandler &rArr; GPIO_GetPendingExtIntGPIONum
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPendingExtIntGPIONum
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPendingExtInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, ac78xx_gpio.o(i.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = EXTI5_9_IRQHandler &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPendingIRQMask
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPendingExtIntGPIONum
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearPendingExtInt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>GPIO_ClearPendingExtInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac78xx_gpio.o(i.GPIO_ClearPendingExtInt))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>GPIO_GetPMUXConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac78xx_gpio.o(i.GPIO_GetPMUXConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
</UL>

<P><STRONG><a name="[98]"></a>GPIO_GetPendingExtIntGPIONum</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, ac78xx_gpio.o(i.GPIO_GetPendingExtIntGPIONum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_GetPendingExtIntGPIONum
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>GPIO_GetPendingIRQMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac78xx_gpio.o(i.GPIO_GetPendingIRQMask))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_GetPinValue</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ac78xx_gpio.o(i.GPIO_GetPinValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_GetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetGPIOxIDR
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_ResetPinBits</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ac78xx_gpio.o(i.GPIO_ResetPinBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ResetPinBits
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetGPIOxBRRx
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>GPIO_SetDir</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ac78xx_gpio.o(i.GPIO_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetGPIOxMODE
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_GPIO_Init
</UL>

<P><STRONG><a name="[6e]"></a>GPIO_SetE4E2</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ac78xx_gpio.o(i.GPIO_SetE4E2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetE4E2
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetGPIOxE4E2x
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_GPIO_Init
</UL>

<P><STRONG><a name="[6b]"></a>GPIO_SetFunc</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ac78xx_gpio.o(i.GPIO_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPMUXConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMUX_SetPMUXxPFSELx
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_UART_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_I2C_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_CAN_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_GPIO_Init
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_SetPinBits</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ac78xx_gpio.o(i.GPIO_SetPinBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetPinBits
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetGPIOxBSRRx
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>GPIO_SetPinValue</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ac78xx_gpio.o(i.GPIO_SetPinValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetPinValue
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetGPIOxODRx
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_GPIO_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_i2c.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClrStatus1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ac78xx_i2c.o(i.I2C2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClrStatus1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C_Initialize</STRONG> (Thumb, 544 bytes, Stack size 16 bytes, ac78xx_i2c.o(i.I2C_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Initialize &rArr; CKGEN_SoftReset
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableInt
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableDMATx
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableDMARx
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DisableInt
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DisableDMATx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DisableDMARx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SoftReset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_I2C2_Init
</UL>

<P><STRONG><a name="[af]"></a>I2C_PageRead</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, i2c.o(i.I2C_PageRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_PageRead &rArr; I2C_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadLastOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>I2C_PageWrite</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, i2c.o(i.I2C_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_PageWrite &rArr; I2C_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Command_Judge
</UL>

<P><STRONG><a name="[b4]"></a>I2C_ReadLastOneByte</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, ac78xx_i2c.o(i.I2C_ReadLastOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ReadLastOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TxEn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendNack
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataReg
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClrStatus1
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PageRead
</UL>

<P><STRONG><a name="[b3]"></a>I2C_ReadOneByte</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ac78xx_i2c.o(i.I2C_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendNack
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadDataReg
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus1
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PageRead
</UL>

<P><STRONG><a name="[b2]"></a>I2C_Restart</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ac78xx_i2c.o(i.I2C_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Restart
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsReady
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PageRead
</UL>

<P><STRONG><a name="[b0]"></a>I2C_Start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ac78xx_i2c.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TxEn
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendStart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsReady
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PageWrite
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PageRead
</UL>

<P><STRONG><a name="[b5]"></a>I2C_Stop</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ac78xx_i2c.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TxEn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsReady
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PageWrite
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PageRead
</UL>

<P><STRONG><a name="[b1]"></a>I2C_WriteOneByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ac78xx_i2c.o(i.I2C_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteDataReg
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TxEn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus1
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PageWrite
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PageRead
</UL>

<P><STRONG><a name="[e1]"></a>InitDelay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system_ac78xx.o(i.InitDelay))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>MSP_CAN_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, can.o(i.MSP_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSP_CAN_Init &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_CAN2_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_CAN1_Init
</UL>

<P><STRONG><a name="[71]"></a>MSP_I2C_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i2c.o(i.MSP_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSP_I2C_Init &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_I2C2_Init
</UL>

<P><STRONG><a name="[75]"></a>MSP_TIMER_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, timer.o(i.MSP_TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MSP_TIMER_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_TIMER1_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_TIMER0_Init
</UL>

<P><STRONG><a name="[7a]"></a>MSP_UART_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, uart.o(i.MSP_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSP_UART_Init &rArr; GPIO_SetFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_UART3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_UART1_Init
</UL>

<P><STRONG><a name="[cb]"></a>SPM_EnablePLL</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ac78xx_spm.o(i.SPM_EnablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ca]"></a>SPM_EnableXOSC</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ac78xx_spm.o(i.SPM_EnableXOSC))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c6]"></a>SPM_GetModuleWakeupSourceFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac78xx_spm.o(i.SPM_GetModuleWakeupSourceFlag))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_IRQHandler
</UL>

<P><STRONG><a name="[32]"></a>SPM_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ac78xx_spm.o(i.SPM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_GetModuleWakeupSourceFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>SetEflashClock</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, system_ac78xx.o(i.SetEflashClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEflashClock
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c9]"></a>SystemClock_Config</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemClock_Config &rArr; CKGEN_SetSFlashClock &rArr; WriteBitsValue
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_EnableXOSC
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPM_EnablePLL
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSysclkSrc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSysclkDiv
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSFlashClock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPllPrevDiv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPllPostDiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPllFeedbackDiv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPLLReference
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetAPBClockDivider
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, system_ac78xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit &rArr; SetEflashClock
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEflashClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIMER0_IRQHandler_Callback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ac78xx_irq_cb.o(i.TIMER0_IRQHandler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER0_IRQHandler_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetTimerCtrl
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.ATC_TIMER0_Init)
</UL>
<P><STRONG><a name="[28]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIMER1_IRQHandler_Callback</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ac78xx_irq_cb.o(i.TIMER1_IRQHandler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TIMER1_IRQHandler_Callback &rArr; UART_Command_Judge &rArr; I2C_PageWrite &rArr; I2C_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetTimerCtrl
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClrIntFlag
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Command_Judge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(i.ATC_TIMER1_Init)
</UL>
<P><STRONG><a name="[38]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_timer.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_timer.o(i.TIMER4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_timer.o(i.TIMER5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_timer.o(i.TIMER6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER7_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ac78xx_timer.o(i.TIMER7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>TIMER_ClrIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ac78xx_timer.o(i.TIMER_ClrIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler_Callback
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler_Callback
</UL>

<P><STRONG><a name="[cd]"></a>TIMER_GetTimerCtrl</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac78xx_timer.o(i.TIMER_GetTimerCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler_Callback
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler_Callback
</UL>

<P><STRONG><a name="[76]"></a>TIMER_Init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ac78xx_timer.o(i.TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_Init &rArr; TIMER_ModuleEnable &rArr; CKGEN_SoftReset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ModuleEnable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_TIMER1_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_TIMER0_Init
</UL>

<P><STRONG><a name="[d0]"></a>TIMER_ModuleEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ac78xx_timer.o(i.TIMER_ModuleEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_ModuleEnable &rArr; CKGEN_SoftReset
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SoftReset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[74]"></a>TIMER_SetCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac78xx_timer.o(i.TIMER_SetCallback))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_TIMER1_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_TIMER0_Init
</UL>

<P><STRONG><a name="[b]"></a>UART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ac78xx_uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART1_IRQHandler &rArr; UART_InterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART1_IRQHandler_Callback</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ac78xx_irq_cb.o(i.UART1_IRQHandler_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.ATC_UART1_Init)
</UL>
<P><STRONG><a name="[c]"></a>UART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ac78xx_uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART2_IRQHandler &rArr; UART_InterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ac78xx_uart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART3_IRQHandler &rArr; UART_InterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART3_IRQHandler_Callback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ac78xx_irq_cb.o(i.UART3_IRQHandler_Callback))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.ATC_UART3_Init)
</UL>
<P><STRONG><a name="[e]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ac78xx_uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; UART_InterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ac78xx_uart.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART5_IRQHandler &rArr; UART_InterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ac78xx_uart.o(i.UART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART6_IRQHandler &rArr; UART_InterruptHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ac78xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>UART_Command_Judge</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, ac78xx_irq_cb.o(i.UART_Command_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_Command_Judge &rArr; I2C_PageWrite &rArr; I2C_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PageWrite
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler_Callback
</UL>

<P><STRONG><a name="[7b]"></a>UART_Init</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, ac78xx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UART_Init &rArr; UART_SetBaudrate &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SoftReset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_Enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetParity
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetDataBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_UART3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_UART1_Init
</UL>

<P><STRONG><a name="[d7]"></a>UART_SetBaudrate</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ac78xx_uart.o(i.UART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_SetBaudrate &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[79]"></a>UART_SetEventCallback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ac78xx_uart.o(i.UART_SetEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SetEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_UART3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_UART1_Init
</UL>

<P><STRONG><a name="[8b]"></a>WaitTransmitPrimaryDone</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ac78xx_can.o(i.WaitTransmitPrimaryDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WaitTransmitPrimaryDone
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WaitTransmissionDone
</UL>

<P><STRONG><a name="[8c]"></a>WaitTransmitSecondaryDone</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ac78xx_can.o(i.WaitTransmitSecondaryDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WaitTransmitSecondaryDone
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WaitTransmissionDone
</UL>

<P><STRONG><a name="[8e]"></a>WriteBitsValue</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, system_ac78xx.o(i.WriteBitsValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteBitsValue
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSysclkSrc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSysclkDiv
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetSFlashClock
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPllPrevDiv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPllPostDiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPllFeedbackDiv
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetPLLReference
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetAPBClockDivider
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKGEN_SetCANClock
</UL>

<P><STRONG><a name="[da]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[db]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[dc]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[de]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[f3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[df]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[9b]"></a>log</STRONG> (Thumb, 808 bytes, Stack size 96 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
</UL>

<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = main &rArr; ATC_UART3_Init &rArr; UART_Init &rArr; UART_SetBaudrate &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDelay
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PageRead
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinValue
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPinBits
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinValue
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_UART3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_UART1_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_TIMER1_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_TIMER0_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_I2C2_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_GPIO_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_CAN2_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_CAN1_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d4]"></a>mdelay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, system_ac78xx.o(i.mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mdelay &rArr; SysTickRepeatDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickRepeatDelay
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Command_Judge
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[68]"></a>CAN_Standby</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, can.o(i.CAN_Standby))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_CAN2_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_CAN1_Init
</UL>

<P><STRONG><a name="[c1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, can.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_CAN_Init
</UL>

<P><STRONG><a name="[c0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, can.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_CAN_Init
</UL>

<P><STRONG><a name="[c3]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_TIMER_Init
</UL>

<P><STRONG><a name="[c2]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_TIMER_Init
</UL>

<P><STRONG><a name="[7c]"></a>UART_SetRxIntEn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(i.UART_SetRxIntEn))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_UART3_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATC_UART1_Init
</UL>

<P><STRONG><a name="[c5]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_UART_Init
</UL>

<P><STRONG><a name="[c4]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_UART_Init
</UL>

<P><STRONG><a name="[7f]"></a>CAN_IsMsgInReceiveBuf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ac78xx_irq_cb.o(i.CAN_IsMsgInReceiveBuf))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_IRQHandler_Callback
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_IRQHandler_Callback
</UL>

<P><STRONG><a name="[c8]"></a>SysTickDelay</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, system_ac78xx.o(i.SysTickDelay))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickRepeatDelay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>

<P><STRONG><a name="[c7]"></a>SysTickRepeatDelay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, system_ac78xx.o(i.SysTickRepeatDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTickRepeatDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>

<P><STRONG><a name="[9d]"></a>GPIO_GetGPIOxIDR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac78xx_gpio.o(i.GPIO_GetGPIOxIDR))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinValue
</UL>

<P><STRONG><a name="[9f]"></a>GPIO_SetGPIOxBRRx</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, ac78xx_gpio.o(i.GPIO_SetGPIOxBRRx))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPinBits
</UL>

<P><STRONG><a name="[a5]"></a>GPIO_SetGPIOxBSRRx</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, ac78xx_gpio.o(i.GPIO_SetGPIOxBSRRx))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinBits
</UL>

<P><STRONG><a name="[a1]"></a>GPIO_SetGPIOxE4E2x</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, ac78xx_gpio.o(i.GPIO_SetGPIOxE4E2x))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetE4E2
</UL>

<P><STRONG><a name="[a0]"></a>GPIO_SetGPIOxMODE</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, ac78xx_gpio.o(i.GPIO_SetGPIOxMODE))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
</UL>

<P><STRONG><a name="[a6]"></a>GPIO_SetGPIOxODRx</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, ac78xx_gpio.o(i.GPIO_SetGPIOxODRx))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinValue
</UL>

<P><STRONG><a name="[a3]"></a>PMUX_SetPMUXxPFSELx</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, ac78xx_gpio.o(i.PMUX_SetPMUXxPFSELx))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
</UL>

<P><STRONG><a name="[86]"></a>CAN_SetBitrate</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ac78xx_can.o(i.CAN_SetBitrate))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
</UL>

<P><STRONG><a name="[82]"></a>GetCanIndex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ac78xx_can.o(i.GetCanIndex))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetEventCallBack
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Initialize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WaitTransmissionDone
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_HandleEvent
</UL>

<P><STRONG><a name="[a7]"></a>I2C_ClrStatus1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_ClrStatus1))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadLastOneByte
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>I2C_DisableDMARx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_DisableDMARx))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[ae]"></a>I2C_DisableDMATx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_DisableDMATx))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[aa]"></a>I2C_DisableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_DisableInt))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[ab]"></a>I2C_EnableDMARx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_EnableDMARx))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[ad]"></a>I2C_EnableDMATx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_EnableDMATx))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[a8]"></a>I2C_EnableInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[bb]"></a>I2C_GetStatus1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_GetStatus1))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
</UL>

<P><STRONG><a name="[bd]"></a>I2C_IsBusy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_IsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
</UL>

<P><STRONG><a name="[be]"></a>I2C_IsReady</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
</UL>

<P><STRONG><a name="[ba]"></a>I2C_ReadDataReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_ReadDataReg))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadLastOneByte
</UL>

<P><STRONG><a name="[b9]"></a>I2C_SendAck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_SendAck))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadLastOneByte
</UL>

<P><STRONG><a name="[b8]"></a>I2C_SendNack</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_SendNack))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadLastOneByte
</UL>

<P><STRONG><a name="[bc]"></a>I2C_SendStart</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_SendStart))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Restart
</UL>

<P><STRONG><a name="[b7]"></a>I2C_TxEn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_TxEn))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadLastOneByte
</UL>

<P><STRONG><a name="[bf]"></a>I2C_WriteDataReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.I2C_WriteDataReg))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
</UL>

<P><STRONG><a name="[a9]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ac78xx_i2c.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>

<P><STRONG><a name="[97]"></a>DMA_ChannelHardRst</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ac78xx_dma.o(i.DMA_ChannelHardRst))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>

<P><STRONG><a name="[d1]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ac78xx_timer.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>

<P><STRONG><a name="[d2]"></a>UART_InterruptHandler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ac78xx_uart.o(i.UART_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_InterruptHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>UART_SetDataBits</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, ac78xx_uart.o(i.UART_SetDataBits))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[d6]"></a>UART_SetParity</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ac78xx_uart.o(i.UART_SetParity))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
